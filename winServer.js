// var net = require('net');

// var hCount = 0;
// var connIDs = 0;
// var cHeartBeats = {};

// var server = net.createServer(function(c) { //'connection' listener
//   console.log('server connected');

//   c.id = connIDs++;
//   cHeartBeats[c.id] = true;

//   c.on('data', function(data)
//   {
//   	console.log('Receiving: ', data.toString());
//   })
//   c.on('end', function() {
//    	cHeartBeats[c.id] = false;
//     console.log('server disconnected');
//   });
  
//   setInterval(function()
//   {
//   	if(cHeartBeats[c.id])
//   		c.write('honk check ' + (hCount++) + '\r\n');
//   }, 2000)

//   // c.pipe(c);
  
// });

// server.listen(8001, function() { //'listening' listener
//   console.log('server bound');
// });

var fs = require('fs');

var controlApp = require('express')();

var uiSocketServer = require(__dirname + "/UI/uiServer.js")();
var worldCreator = require(__dirname + "/WIN/worldCreator.js");

var httpServer = uiSocketServer.httpServer;
var expressApp = uiSocketServer.expressApp;
var uiControl = uiSocketServer.uiControl;

var worldID = 0;
var worlds = {};

var addWorld = function(world){
	world.worldID = worldID++;
	worlds[world.worldID] = world;
}

var removeWorld = function(worldOrID)
{	
	if(typeof worldOrID == 'object')
	{
		delete worlds[worldOrID.worldID];
	}
	else
		delete worlds[worldOrID];
}

uiControl.registerEvent('sampleGenome', function(socketID, worldReturn)
{
	console.log('Returned Sample Genome event: ', arguments);

	//load our sample genome for testing
	var ngJSON = JSON.parse(fs.readFileSync(__dirname + '/Data/jsGenome112.json'));

	worldCreator.qCreateWorld(ngJSON)
		.then(function(worldObj)
		{
			//grab the world object
			var nWorld = worldObj.world;

			//keep track of the worlds here 
			//todo: Move world control to an appropriate class
			addWorld(nWorld);

			//callback when finished!
			//we have the world, and it's people
			worldReturn(undefined, nWorld.worldID, worldObj.morphology);
		})
		.fail(function(err)
		{
			//pass our failures back to the UI
			worldReturn(err);
		});
});

uiControl.registerEvent('simulateAndDrawWorld', function(socketID, worldID, simTime, worldReturn)
{
	var worldToDraw = worlds[worldID];
	if(!worldToDraw)
	{
		worldReturn("Invalid worldID sent.");
		return;
	}

	var simInfo = worldToDraw.simulateWorldMS(simTime);
	var drawInfo = worldToDraw.getWorldDrawList();

	worldReturn(null, simInfo, drawInfo);
});

controlApp.get('/doofus', function(req,res)
{

  res.json({fancy: "town"});

});

//pass control into our express app generated by the UI
expressApp.use(controlApp);


httpServer.listen('8000', function()
{

  console.log('Logged a few monkeys in my time: 8000');

})







 

